/////////////////////////////////////////////////////////////////////////////
// This file is part of EasyRPG Player.
//
// EasyRPG Player is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// EasyRPG Player is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with EasyRPG Player. If not, see <http://www.gnu.org/licenses/>.
/////////////////////////////////////////////////////////////////////////////

#ifndef _EASYRPG_PLAYER_AUDIO_H_
#define _EASYRPG_PLAYER_AUDIO_H_

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <string>

////////////////////////////////////////////////////////////
/// Base Audio class.
////////////////////////////////////////////////////////////
namespace Audio {
	///////////////////////////////////////////////////////
	/// Initializes the Audio System.
	///////////////////////////////////////////////////////
	void Init();

	///////////////////////////////////////////////////////
	/// Shuts the Audio System down
	///////////////////////////////////////////////////////
	void Quit();

	///////////////////////////////////////////////////////
	/// Plays a background music.
	/// @param file : File to play
	/// @param volume : Volume
	/// @param pitch : 
	///////////////////////////////////////////////////////
	void BGM_Play(std::string file, int volume, int pitch);

	///////////////////////////////////////////////////////
	/// Stops the currently playing background music.
	///////////////////////////////////////////////////////
	void BGM_Stop();

	///////////////////////////////////////////////////////
	/// Does a fade out of the background music.
	/// @param fade : Fade out time
	///////////////////////////////////////////////////////
	void BGM_Fade(int fade);

	///////////////////////////////////////////////////////
	/// Pauses the currently playing background music.
	///////////////////////////////////////////////////////
	void BGM_Pause();

	///////////////////////////////////////////////////////
	/// Resumes the currently playing background music.
	///////////////////////////////////////////////////////
	void BGM_Resume();

	///////////////////////////////////////////////////////
	/// Plays a background sound.
	/// @param file : File to play
	/// @param volume : Volume
	/// @param pitch : 
	///////////////////////////////////////////////////////
	void BGS_Play(std::string file, int volume, int pitch);

	///////////////////////////////////////////////////////
	/// Stops the currently playing background sound.
	///////////////////////////////////////////////////////
	void BGS_Stop();

	///////////////////////////////////////////////////////
	/// Does a fade out of the background sound.
	/// @param fade : Fade out time
	///////////////////////////////////////////////////////
	void BGS_Fade(int fade);

	///////////////////////////////////////////////////////
	/// Plays a music effect.
	/// @param file : File to play
	/// @param volume : Volume
	/// @param pitch : 
	///////////////////////////////////////////////////////
	void ME_Play(std::string file, int volume, int pitch);

	///////////////////////////////////////////////////////
	/// Stops the currently playing music effect.
	///////////////////////////////////////////////////////
	void ME_Stop();

	///////////////////////////////////////////////////////
	/// Does a fade out of the music effect.
	/// @param fade : Fade out time
	///////////////////////////////////////////////////////
	void ME_Fade(int fade);

	///////////////////////////////////////////////////////
	/// Plays a sound effect
	/// @param file : File to play
	/// @param volume : Volume
	/// @param pitch : 
	///////////////////////////////////////////////////////
	void SE_Play(std::string file, int volume, int pitch);

	///////////////////////////////////////////////////////
	/// Stops the currently playing sound effect.
	///////////////////////////////////////////////////////
	void SE_Stop();
}

#endif
