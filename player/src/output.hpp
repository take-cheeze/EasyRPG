/////////////////////////////////////////////////////////////////////////////
// This file is part of EasyRPG Player.
//
// EasyRPG Player is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// EasyRPG Player is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with EasyRPG Player. If not, see <http://www.gnu.org/licenses/>.
/////////////////////////////////////////////////////////////////////////////

#ifndef _OUTPUT_H_
#define _OUTPUT_H_

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <string>

////////////////////////////////////////////////////////////
/// Output Namespace
////////////////////////////////////////////////////////////
namespace Output {
	///////////////////////////////////////////////////////
	/// Display a string with formatted string.
	/// @param fmt : formatted string to display
	///////////////////////////////////////////////////////
	void Post(char* fmt, ...);

	///////////////////////////////////////////////////////
	/// Display a string with formatted string.
	/// @param fmt : formatted string to display
	///////////////////////////////////////////////////////
	void Post(const char* fmt, ...);

	///////////////////////////////////////////////////////
	/// Display a string msg.
	/// @param msg : string to display
	///////////////////////////////////////////////////////
	void PostStr(std::string msg);

	///////////////////////////////////////////////////////
	/// Display a warning with formatted string.
	/// @param fmt : formatted warning to display
	///////////////////////////////////////////////////////
	void Warning(char* fmt, ...);

	///////////////////////////////////////////////////////
	/// Display a warning with formatted string.
	/// @param fmt : formatted warning to display
	///////////////////////////////////////////////////////
	void Warning(const char* fmt, ...);

	///////////////////////////////////////////////////////
	/// Display a warning.
	/// @param warn : warning to display
	///////////////////////////////////////////////////////
	void WarningStr(std::string warn);

	///////////////////////////////////////////////////////
	/// Raises an error message with formatted string and
	/// closes the player afterwards.
	/// @param fmt : formatted error to display
	///////////////////////////////////////////////////////
	void Error(char* fmt, ...);

	///////////////////////////////////////////////////////
	/// Raises an error message with formatted string and
	/// closes the player afterwards.
	/// @param fmt : formatted error to display
	///////////////////////////////////////////////////////
	void Error(const char* fmt, ...);

	///////////////////////////////////////////////////////
	/// Display an error message and closes the player
	/// afterwards.
	/// @param err : error to display
	///////////////////////////////////////////////////////
	void ErrorStr(std::string err);

	///////////////////////////////////////////////////////
	/// Prints a debug message to the console.
	/// @param fmt : formatted debug text to display
	///////////////////////////////////////////////////////
	void Debug(char* fmt, ...);

	///////////////////////////////////////////////////////
	/// Prints a debug message to the console.
	/// @param fmt : formatted debug text to display
	///////////////////////////////////////////////////////
	void Debug(const char* fmt, ...);

	///////////////////////////////////////////////////////
	/// Prints a debug message to the console.
	/// @param err: formatted debug text to display
	///////////////////////////////////////////////////////
	void DebugStr(std::string msg);
}

#endif
