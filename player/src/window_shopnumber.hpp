/////////////////////////////////////////////////////////////////////////////
// This file is part of EasyRPG Player.
//
// EasyRPG Player is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// EasyRPG Player is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with EasyRPG Player. If not, see <http://www.gnu.org/licenses/>.
/////////////////////////////////////////////////////////////////////////////

#ifndef _WINDOW_SHOPNUMBER_H_
#define _WINDOW_SHOPNUMBER_H_

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <string>
#include "window_base.hpp"

////////////////////////////////////////////////////////////
/// Window Input Number Class
/// The number input window
////////////////////////////////////////////////////////////
class Window_ShopNumber : public Window_Base {
public:
	////////////////////////////////////////////////////////
	/// Constructor
	///	allowed
	////////////////////////////////////////////////////////
	Window_ShopNumber(int ix, int iy, int iwidth = 320, int iheight = 80);
	
	////////////////////////////////////////////////////////
	/// Destructor
	////////////////////////////////////////////////////////
	~Window_ShopNumber();
	
	////////////////////////////////////////////////////////
	/// Updates the Window's contents
	////////////////////////////////////////////////////////
	void Refresh();
	
	////////////////////////////////////////////////////////
	/// Returns the number value.
	/// @return The currently inputted number
	////////////////////////////////////////////////////////
	int GetNumber() const;

	////////////////////////////////////////////////////////
	/// Returns the total value of the items.
	/// @return The total value of the items.
	////////////////////////////////////////////////////////
	int GetTotal() const;
	
	////////////////////////////////////////////////////////
	/// Sets a new number value
	/// @param inumber : The new number value
	////////////////////////////////////////////////////////
	void SetNumber(unsigned int val);
	
	////////////////////////////////////////////////////////
	/// Sets the range
	/// @param lo : the minimum value
	/// @param hi : the maximum value
	////////////////////////////////////////////////////////
	void SetRange(unsigned int lo, unsigned int hi);

	////////////////////////////////////////////////////////
	/// Sets the item value
	/// @param val : the item value
	////////////////////////////////////////////////////////
	void SetItemValue(unsigned int val);

	////////////////////////////////////////////////////////
	/// Sets the item name
	/// @param name : the item name
	////////////////////////////////////////////////////////
	void SetItemName(const std::string& name);

	////////////////////////////////////////////////////////
	/// Updates number value according to user input
	////////////////////////////////////////////////////////
	void Update();
	
protected:
	unsigned int lo, hi;
	unsigned int number;
	unsigned int item_value;
	std::string item_name;
};

#endif
